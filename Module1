import os

# Function to read DNA sequences from a file
def read_sequences_from_file(filename):
    sequences = []
    try:
        with open(filename, 'r') as file:
            for line in file:
                sequences.append(line.strip())
    except FileNotFoundError:
        print("File not found.")
    return sequences

# Function to calculate the number of matches between two DNA sequences
def calculate_matches(sequence1, sequence2):
    if len(sequence1) != len(sequence2):
        print("Error: Sequences must be of the same length.")
        return None

    match_count = sum(char1 == char2 for char1, char2 in zip(sequence1, sequence2))
    return match_count

# Function to calculate the maximum contiguous chain between two DNA sequences
def calculate_max_contiguous_chain(sequence1, sequence2):
    if len(sequence1) != len(sequence2):
        print("Error: Sequences must be of the same length.")
        return None

    max_contiguous_chain = 0
    current_contiguous_chain = 0

    for char1, char2 in zip(sequence1, sequence2):
        if char1 == char2:
            current_contiguous_chain += 1
            max_contiguous_chain = max(max_contiguous_chain, current_contiguous_chain)
        else:
            current_contiguous_chain = 0

    return max_contiguous_chain

# Function to set the maximum shift based on user input
def set_max_shift():
    max_shift = int(input("Enter the maximum shift: "))
    return max_shift

# Function to calculate the number of matches with shifts iterating through the maximum shift
def calculate_matches_with_shifts(sequence1, sequence2, max_shift):
    if len(sequence1) != len(sequence2):
        print("Error: Sequences must be of the same length.")
        return None, 0

    max_match_count = 0
    best_shift = 0

    for shift in range(1, max_shift + 1):
        shifted_sequence1 = sequence1[-shift:] + sequence1[:-shift]
        match_count = calculate_matches(shifted_sequence1, sequence2)

        if match_count is not None and match_count > max_match_count:
            max_match_count = match_count
            best_shift = shift

    return max_match_count, best_shift

# Function to calculate the maximum contiguous chain with shifts iterating through the maximum shift
def calculate_max_contiguous_chain_with_shifts(sequence1, sequence2, max_shift):
    if len(sequence1) != len(sequence2):
        print("Error: Sequences must be of the same length.")
        return None, 0

    max_contiguous_chain = 0
    best_shift = 0

    for shift in range(1, max_shift + 1):
        shifted_sequence1 = sequence1[-shift:] + sequence1[:-shift]
        chain_length = calculate_max_contiguous_chain(shifted_sequence1, sequence2)

        if chain_length is not None and chain_length > max_contiguous_chain:
            max_contiguous_chain = chain_length
            best_shift = shift

    return max_contiguous_chain, best_shift

# Function to find the maximum score and the longest contiguous chain among all shifts
def find_maximum_score_and_chain(sequence1, sequence2, max_shift):
    if len(sequence1) != len(sequence2):
        print("Error: Sequences must be of the same length.")
        return None, 0, None, 0

    max_score = 0
    max_contiguous_chain = 0
    best_shift_match = 0
    best_shift_chain = 0

    for shift in range(1, max_shift + 1):
        shifted_sequence1 = sequence1[-shift:] + sequence1[:-shift]
        match_count = calculate_matches(shifted_sequence1, sequence2)
        chain_length = calculate_max_contiguous_chain(shifted_sequence1, sequence2)

        if match_count is not None and match_count > max_score:
            max_score = match_count
            best_shift_match = shift

        if chain_length is not None and chain_length > max_contiguous_chain:
            max_contiguous_chain = chain_length
            best_shift_chain = shift

    return max_score, best_shift_match, max_contiguous_chain, best_shift_chain

# Main menu for user interaction
def main_menu():
    while True:
        print("\nMain Menu:")
        print("1. Calculate Number of Matches with Maximum Shift (Console Input)")
        print("2. Calculate Maximum Contiguous Chain with Maximum Shift (Console Input)")
        print("3. Calculate Maximum Score and Longest Chain (Console Input)")
        print("4. Calculate Number of Matches with Maximum Shift (File Input)")
        print("5. Calculate Maximum Contiguous Chain with Maximum Shift (File Input)")
        print("6. Calculate Maximum Score and Longest Chain (File Input)")
        print("7. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            sequence1 = input("Enter the first DNA sequence: ").upper()
            sequence2 = input("Enter the second DNA sequence: ").upper()
            if len(sequence1) != len(sequence2):
                print("Error: Sequences must be of the same length.")
            else:
                max_shift = set_max_shift()
                max_match_count, best_shift = calculate_matches_with_shifts(sequence1, sequence2, max_shift)
                print(f"Number of Matches with Maximum Shift ({best_shift}): {max_match_count}")
        elif choice == '2':
            sequence1 = input("Enter the first DNA sequence: ").upper()
            sequence2 = input("Enter the second DNA sequence: ").upper()
            if len(sequence1) != len(sequence2):
                print("Error: Sequences must be of the same length.")
            else:
                max_shift = set_max_shift()
                max_contiguous_chain, best_shift = calculate_max_contiguous_chain_with_shifts(sequence1, sequence2, max_shift)
                print(f"Maximum Contiguous Chain with Maximum Shift ({best_shift}): {max_contiguous_chain}")
        elif choice == '3':
            sequence1 = input("Enter the first DNA sequence: ").upper()
            sequence2 = input("Enter the second DNA sequence: ").upper()
            if len(sequence1) != len(sequence2):
                print("Error: Sequences must be of the same length.")
            else:
                max_shift = set_max_shift()
                max_score, best_shift_match, max_chain, best_shift_chain = find_maximum_score_and_chain(sequence1, sequence2, max_shift)
                print(f"Maximum Score with Maximum Shift ({best_shift_match}): {max_score}")
                print(f"Maximum Contiguous Chain with Maximum Shift ({best_shift_chain}): {max_chain}")
        elif choice == '4':
            filename = input("Enter the filename: ")
            sequences = read_sequences_from_file(filename)
            if len(sequences) >= 2:
                if len(sequences[0]) != len(sequences[1]):
                    print("Error: Sequences in the file must be of the same length.")
                else:
                    max_shift = set_max_shift()
                    max_match_count, best_shift = calculate_matches_with_shifts(sequences[0], sequences[1], max_shift)
                    print(f"Number of Matches with Maximum Shift ({best_shift}): {max_match_count}")
            else:
                print("File must contain at least two sequences.")
        elif choice == '5':
            filename = input("Enter the filename: ")
            sequences = read_sequences_from_file(filename)
            if len(sequences) >= 2:
                if len(sequences[0]) != len(sequences[1]):
                    print("Error: Sequences in the file must be of the same length.")
                else:
                    max_shift = set_max_shift()
                    max_contiguous_chain, best_shift = calculate_max_contiguous_chain_with_shifts(sequences[0], sequences[1], max_shift)
                    print(f"Maximum Contiguous Chain with Maximum Shift ({best_shift}): {max_contiguous_chain}")
            else:
                print("File must contain at least two sequences.")
        elif choice == '6':
            filename = input("Enter the filename: ")
            sequences = read_sequences_from_file(filename)
            if len(sequences) >= 2:
                if len(sequences[0]) != len(sequences[1]):
                    print("Error: Sequences in the file must be of the same length.")
                else:
                    max_shift = set_max_shift()
                    max_score, best_shift_match, max_chain, best_shift_chain = find_maximum_score_and_chain(sequences[0], sequences[1], max_shift)
                    print(f"Maximum Score with Maximum Shift ({best_shift_match}): {max_score}")
                    print(f"Maximum Contiguous Chain with Maximum Shift ({best_shift_chain}): {max_chain}")
            else:
                print("File must contain at least two sequences.")
        elif choice == '7':
            print("Exiting program.")
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main_menu()
